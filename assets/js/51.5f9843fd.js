(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{344:function(a,t,e){"use strict";e.r(t);var r=e(4),s=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"实用的javascript-代码片段-你千万要收藏好-上"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实用的javascript-代码片段-你千万要收藏好-上"}},[a._v("#")]),a._v(" 实用的JavaScript 代码片段，你千万要收藏好（上）")]),a._v(" "),t("h1",{attrs:{id:"_1、all"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、all"}},[a._v("#")]),a._v(" "),t("strong",[a._v("1、all")])]),a._v(" "),t("p",[a._v("如果谓词函数对集合中的所有元素返回 true，则此代码段返回 true，否则返回 false。 如果你想使用布尔值作为默认值，你可以省略第二个参数 fn。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const all = (arr, fn = Boolean) => arr.every(fn);\nall([4, 2, 3], x => x > 1); // trueall([1, 2, 3]); // true\n")])])]),t("h1",{attrs:{id:"_2、-allequal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、-allequal"}},[a._v("#")]),a._v(" "),t("strong",[a._v("2、 allEqual")])]),a._v(" "),t("p",[a._v("此代码段检查数组的所有元素是否相等。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const allEqual = arr => arr.every(val => val === arr[0]);\nallEqual([1, 2, 3, 4, 5, 6]); // falseallEqual([1, 1, 1, 1]); // true\n")])])]),t("h1",{attrs:{id:"_3、approximatelyequal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、approximatelyequal"}},[a._v("#")]),a._v(" "),t("strong",[a._v("3、approximatelyEqual")])]),a._v(" "),t("p",[a._v("此代码段检查两个数字是否彼此近似相等，差异很小。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const approximatelyEqual = (v1, v2, epsilon = 0.001) => Math.abs(v1  v2) < epsilon;\napproximatelyEqual(Math.PI / 2.0, 1.5708); // true\n")])])]),t("h1",{attrs:{id:"_4、arraytocsv"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、arraytocsv"}},[a._v("#")]),a._v(" "),t("strong",[a._v("4、arrayToCSV")])]),a._v(" "),t("p",[a._v("此代码段将没有逗号或双引号的元素转换为具有逗号分隔值的字符串。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const arrayToCSV = (arr, delimiter = ',') =>  arr.map(v => v.map(x => `\"${x}\"`).join(delimiter)).join('\\n');\narrayToCSV([['a', 'b'], ['c', 'd']]); // '\"a\",\"b\"\\n\"c\",\"d\"'arrayToCSV([['a', 'b'], ['c', 'd']], ';'); // '\"a\";\"b\"\\n\"c\";\"d\"'\n")])])]),t("h1",{attrs:{id:"_5、arraytohtmllist"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、arraytohtmllist"}},[a._v("#")]),a._v(" "),t("strong",[a._v("5、arrayToHtmlList")])]),a._v(" "),t("p",[a._v("此代码段将数组元素转换为"),t("code",[a._v("<li>")]),a._v("标签，并将它们附加到给定 ID 的列表中。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const arrayToHtmlList = (arr, listID) =>  (el => (    (el = document.querySelector('#' + listID)),    (el.innerHTML += arr.map(item => `<li>${item}</li>`).join(''))  ))();\narrayToHtmlList(['item 1', 'item 2'], 'myListID');\n")])])]),t("h1",{attrs:{id:"_6、attempt"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、attempt"}},[a._v("#")]),a._v(" "),t("strong",[a._v("6、attempt")])]),a._v(" "),t("p",[a._v("此代码段执行一个函数，返回结果或捕获的错误对象。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const attempt = (fn, ...args) => {  try {    return fn(...args);  } catch (e) {    return e instanceof Error ? e : new Error(e);  }};var elements = attempt(function(selector) {  return document.querySelectorAll(selector);}, '>_>');if (elements instanceof Error) elements = []; // elements = []\n")])])]),t("h1",{attrs:{id:"_7、average"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7、average"}},[a._v("#")]),a._v(" "),t("strong",[a._v("7、average")])]),a._v(" "),t("p",[a._v("此代码段返回两个或多个数值的平均值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const average = (...nums) => nums.reduce((acc, val) => acc + val, 0) / nums.length;average(...[1, 2, 3]); // 2average(1, 2, 3); // 2\n")])])]),t("h1",{attrs:{id:"_8、averageby"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8、averageby"}},[a._v("#")]),a._v(" "),t("strong",[a._v("8、averageBy")])]),a._v(" "),t("p",[a._v("此代码段在最初使用给定函数将每个元素映射到值后返回数组的平均值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const averageBy = (arr, fn) =>  arr.map(typeof fn === 'function' ? fn : val => val[fn]).reduce((acc, val) => acc + val, 0) /  arr.length;\naverageBy([{ n: 4 }, { n: 2 }, { n: 8 }, { n: 6 }], o => o.n); // 5averageBy([{ n: 4 }, { n: 2 }, { n: 8 }, { n: 6 }], 'n'); // 5\n")])])]),t("h1",{attrs:{id:"_9、bifurcate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9、bifurcate"}},[a._v("#")]),a._v(" "),t("strong",[a._v("9、bifurcate")])]),a._v(" "),t("p",[a._v("此代码段将值分成两组，然后将过滤器的真实元素放入第一组，否则放入第二组。")]),a._v(" "),t("p",[a._v("你可以使用 Array.prototype.reduce() 和 Array.prototype.push() 根据过滤器将元素添加到组中。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const bifurcate = (arr, filter) =>  arr.reduce((acc, val, i) => (acc[filter[i] ? 0 : 1].push(val), acc), [[], []]);bifurcate(['beep', 'boop', 'foo', 'bar'], [true, true, false, true]); // [ ['beep', 'boop', 'bar'], ['foo'] ]\n")])])]),t("h1",{attrs:{id:"_10、bifurcateby"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10、bifurcateby"}},[a._v("#")]),a._v(" "),t("strong",[a._v("10、bifurcateBy")])]),a._v(" "),t("p",[a._v("此代码段根据谓词函数将值分为两组。 如果谓词函数返回一个真值，则该元素将被放置在第一组中。 否则，它将被放置在第二组中。")]),a._v(" "),t("p",[a._v("你可以使用 Array.prototype.reduce() 和 Array.prototype.push() 根据 fn 为每个元素返回的值将元素添加到组中。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const bifurcateBy = (arr, fn) =>  arr.reduce((acc, val, i) => (acc[fn(val, i) ? 0 : 1].push(val), acc), [[], []]);\nbifurcateBy(['beep', 'boop', 'foo', 'bar'], x => x[0] === 'b'); // [ ['beep', 'boop', 'bar'], ['foo'] ]\n")])])]),t("h1",{attrs:{id:"_11、bottomvisible"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11、bottomvisible"}},[a._v("#")]),a._v(" "),t("strong",[a._v("11、bottomVisible")])]),a._v(" "),t("p",[a._v("此代码段检查页面底部是否可见。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const bottomVisible = () =>  document.documentElement.clientHeight + window.scrollY >=  (document.documentElement.scrollHeight || document.documentElement.clientHeight);\nbottomVisible(); // true\n")])])]),t("h1",{attrs:{id:"_12、bytesize"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12、bytesize"}},[a._v("#")]),a._v(" "),t("strong",[a._v("12、byteSize")])]),a._v(" "),t("p",[a._v("此代码段以字节为单位返回字符串的长度。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const byteSize = str => new Blob([str]).size;\nbyteSize('😀'); // 4byteSize('Hello World'); // 11\n")])])]),t("h1",{attrs:{id:"_13、capitalize"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13、capitalize"}},[a._v("#")]),a._v(" "),t("strong",[a._v("13、capitalize")])]),a._v(" "),t("p",[a._v("此代码段将字符串的第一个字母大写。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const capitalize = ([first, ...rest]) =>  first.toUpperCase() + rest.join('');\ncapitalize('fooBar'); // 'FooBar'capitalize('fooBar', true); // 'FooBar'\n")])])]),t("h1",{attrs:{id:"_14、capitalizeeveryword"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14、capitalizeeveryword"}},[a._v("#")]),a._v(" "),t("strong",[a._v("14、capitalizeEveryWord")])]),a._v(" "),t("p",[a._v("此代码段将给定字符串中每个单词的第一个字母大写。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const capitalizeEveryWord = str => str.replace(/\\b[az]/g, char => char.toUpperCase());\ncapitalizeEveryWord('hello world!'); // 'Hello World!'\n")])])]),t("h1",{attrs:{id:"_15、castarray"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15、castarray"}},[a._v("#")]),a._v(" "),t("strong",[a._v("15、castArray")])]),a._v(" "),t("p",[a._v("此代码段将非数组值转换为数组。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const castArray = val => (Array.isArray(val) ? val : [val]);castArray('foo'); // ['foo']castArray([1]); // [1]\n")])])]),t("h1",{attrs:{id:"_16、compact"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16、compact"}},[a._v("#")]),a._v(" "),t("strong",[a._v("16、compact")])]),a._v(" "),t("p",[a._v("此代码段从数组中删除错误值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const compact = arr => arr.filter(Boolean);\ncompact([0, 1, false, 2, '', 3, 'a', 'e' * 23, NaN, 's', 34]); // [ 1, 2, 3, 'a', 's', 34 ]\n")])])]),t("h1",{attrs:{id:"_17、countoccurrences"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17、countoccurrences"}},[a._v("#")]),a._v(" "),t("strong",[a._v("17、countOccurrences")])]),a._v(" "),t("p",[a._v("此代码段计算数组中某个值的出现次数。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const countOccurrences = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0);countOccurrences([1, 1, 2, 1, 2, 3], 1); // 3\n")])])]),t("h1",{attrs:{id:"_18、create-directory"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18、create-directory"}},[a._v("#")]),a._v(" "),t("strong",[a._v("18、Create Directory")])]),a._v(" "),t("p",[a._v("此代码段用于existsSync()检查目录是否存在，mkdirSync()如果不存在则创建它。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const fs = require('fs');const createDirIfNotExists = dir => (!fs.existsSync(dir) ? fs.mkdirSync(dir) : undefined);createDirIfNotExists('test'); // creates the directory 'test', if it doesn't exist\n")])])]),t("h1",{attrs:{id:"_19、currenturl"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_19、currenturl"}},[a._v("#")]),a._v(" "),t("strong",[a._v("19、currentURL")])]),a._v(" "),t("p",[a._v("此代码段返回当前URL。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const currentURL = () => window.location.href;\ncurrentURL(); // 'https://medium.com/@fatosmorina'\n")])])]),t("h1",{attrs:{id:"_20、dayofyear"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20、dayofyear"}},[a._v("#")]),a._v(" "),t("strong",[a._v("20、dayOfYear")])]),a._v(" "),t("p",[a._v("此代码段从Date 对象中获取一年中的哪一天。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const dayOfYear = date =>  Math.floor((date  new Date(date.getFullYear(), 0, 0)) / 1000 / 60 / 60 / 24);\ndayOfYear(new Date()); // 272\n")])])]),t("h1",{attrs:{id:"_21、decapitalize"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_21、decapitalize"}},[a._v("#")]),a._v(" "),t("strong",[a._v("21、decapitalize")])]),a._v(" "),t("p",[a._v("此代码段将字符串的第一个字母转换为小写。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const decapitalize = ([first, ...rest]) =>  first.toLowerCase() + rest.join('')\ndecapitalize('FooBar'); // 'fooBar'decapitalize('FooBar'); // 'fooBar'\n")])])]),t("h1",{attrs:{id:"_22、deepflatten"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22、deepflatten"}},[a._v("#")]),a._v(" "),t("strong",[a._v("22、deepFlatten")])]),a._v(" "),t("p",[a._v("此代码段递归地展平数组。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const deepFlatten = arr => [].concat(...arr.map(v => (Array.isArray(v) ? deepFlatten(v) : v)));\ndeepFlatten([1, [2], [[3], 4], 5]); // [1,2,3,4,5]\n")])])]),t("h1",{attrs:{id:"_23、defaults"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_23、defaults"}},[a._v("#")]),a._v(" "),t("strong",[a._v("23、defaults")])]),a._v(" "),t("p",[a._v("此代码段为对象中未定义的所有属性分配默认值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const defaults = (obj, ...defs) => Object.assign({}, obj, ...defs.reverse(), obj);\ndefaults({ a: 1 }, { b: 2 }, { b: 6 }, { a: 3 }); // { a: 1, b: 2 }\n")])])]),t("h1",{attrs:{id:"_24、defer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_24、defer"}},[a._v("#")]),a._v(" "),t("strong",[a._v("24、defer")])]),a._v(" "),t("p",[a._v("此代码段会延迟函数的执行，直到清除当前调用堆栈。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const defer = (fn, ...args) => setTimeout(fn, 1, ...args);\ndefer(console.log, 'a'), console.log('b'); // logs 'b' then 'a'\n")])])]),t("h1",{attrs:{id:"_25、degreestorads"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_25、degreestorads"}},[a._v("#")]),a._v(" "),t("strong",[a._v("25、degreesToRads")])]),a._v(" "),t("p",[a._v("此代码片段可用于将值从度数转换为弧度。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const degreesToRads = deg => (deg * Math.PI) / 180.0;\ndegreesToRads(90.0); // ~1.5708\n")])])]),t("h1",{attrs:{id:"_26、difference"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_26、difference"}},[a._v("#")]),a._v(" "),t("strong",[a._v("26、difference")])]),a._v(" "),t("p",[a._v("此代码段查找两个数组之间的差异。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const difference = (a, b) => {  const s = new Set(b);  return a.filter(x => !s.has(x));};\ndifference([1, 2, 3], [1, 2, 4]); // [3]\n")])])]),t("h1",{attrs:{id:"_27、differenceby"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_27、differenceby"}},[a._v("#")]),a._v(" "),t("strong",[a._v("27、differenceBy")])]),a._v(" "),t("p",[a._v("在将给定函数应用于两个列表的每个元素之后，此方法返回两个数组之间的差异。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const differenceBy = (a, b, fn) => {  const s = new Set(b.map(fn));  return a.filter(x => !s.has(fn(x)));};\ndifferenceBy([2.1, 1.2], [2.3, 3.4], Math.floor); // [1.2]differenceBy([{ x: 2 }, { x: 1 }], [{ x: 1 }], v => v.x); // [ { x: 2 } ]\n")])])]),t("h1",{attrs:{id:"_28、differencewith"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_28、differencewith"}},[a._v("#")]),a._v(" "),t("strong",[a._v("28、differenceWith")])]),a._v(" "),t("p",[a._v("此代码段删除了比较器函数返回的值false。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const differenceWith = (arr, val, comp) => arr.filter(a => val.findIndex(b => comp(a, b)) === 1);\ndifferenceWith([1, 1.2, 1.5, 3, 0], [1.9, 3, 0], (a, b) => Math.round(a) === Math.round(b)); // [1, 1.2]\n")])])]),t("h1",{attrs:{id:"_29、digitize"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_29、digitize"}},[a._v("#")]),a._v(" "),t("strong",[a._v("29、digitize")])]),a._v(" "),t("p",[a._v("此代码段获取一个数字作为输入并返回其数字数组。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const digitize = n => [...`${n}`].map(i => parseInt(i));\ndigitize(431); // [4, 3, 1]\n")])])]),t("h1",{attrs:{id:"_30、distance"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_30、distance"}},[a._v("#")]),a._v(" "),t("strong",[a._v("30、distance")])]),a._v(" "),t("p",[a._v("此代码段通过计算距离返回两点之间的距离。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const distance = (x0, y0, x1, y1) => Math.hypot(x1  x0, y1  y0);\ndistance(1, 1, 2, 3); // 2.23606797749979\n")])])]),t("h1",{attrs:{id:"_31、drop-elements"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_31、drop-elements"}},[a._v("#")]),a._v(" "),t("strong",[a._v("31、drop Elements")])]),a._v(" "),t("p",[a._v("此代码段返回一个从左侧删除了 n 个元素的新数组。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const drop = (arr, n = 1) => arr.slice(n);\ndrop([1, 2, 3]); // [2,3]drop([1, 2, 3], 2); // [3]drop([1, 2, 3], 42); // []\n")])])]),t("h1",{attrs:{id:"_32、dropright"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_32、dropright"}},[a._v("#")]),a._v(" "),t("strong",[a._v("32、dropRight")])]),a._v(" "),t("p",[a._v("此代码段返回一个从右侧删除了 n 个元素的新数组。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const dropRight = (arr, n = 1) => arr.slice(0, n);\ndropRight([1, 2, 3]); // [1,2]dropRight([1, 2, 3], 2); // [1]dropRight([1, 2, 3], 42); // []\n")])])]),t("h1",{attrs:{id:"_33、droprightwhile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_33、droprightwhile"}},[a._v("#")]),a._v(" "),t("strong",[a._v("33、dropRightWhile")])]),a._v(" "),t("p",[a._v("此代码段从数组的右侧删除元素，直到传递的函数返回 true。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const dropRightWhile = (arr, func) => {  while (arr.length > 0 && !func(arr[arr.length  1])) arr = arr.slice(0, 1);  return arr;};\ndropRightWhile([1, 2, 3, 4], n => n < 3); // [1, 2]\n")])])]),t("h1",{attrs:{id:"_34、dropwhile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_34、dropwhile"}},[a._v("#")]),a._v(" "),t("strong",[a._v("34、dropWhile")])]),a._v(" "),t("p",[a._v("此代码段从数组中删除元素，直到传递的函数返回true。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const dropWhile = (arr, func) => {  while (arr.length > 0 && !func(arr[0])) arr = arr.slice(1);  return arr;};\ndropWhile([1, 2, 3, 4], n => n >= 3); // [3,4]\n")])])]),t("h1",{attrs:{id:"_35、elementcontains"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_35、elementcontains"}},[a._v("#")]),a._v(" "),t("strong",[a._v("35、elementContains")])]),a._v(" "),t("p",[a._v("此代码段检查父元素是否包含子元素。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const elementContains = (parent, child) => parent !== child && parent.contains(child);\nelementContains(document.querySelector('head'), document.querySelector('title')); // trueelementContains(document.querySelector('body'), document.querySelector('body')); // false\n")])])]),t("h1",{attrs:{id:"_36、过滤重复元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_36、过滤重复元素"}},[a._v("#")]),a._v(" "),t("strong",[a._v("36、过滤重复元素")])]),a._v(" "),t("p",[a._v("此代码段删除数组中的重复值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const filterNonUnique = arr => [ …new Set(arr)];filterNonUnique([1, 2, 2, 3, 4, 4, 5]); // [1, 2, 3, 4, 5]\n")])])]),t("h1",{attrs:{id:"_37、findkey"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_37、findkey"}},[a._v("#")]),a._v(" "),t("strong",[a._v("37、findKey")])]),a._v(" "),t("p",[a._v("此代码段返回满足给定函数的第一个键值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const findKey = (obj, fn) => Object.keys(obj).find(key => fn(obj[key], key, obj));\nfindKey(  {    barney: { age: 36, active: true },    fred: { age: 40, active: false },    pebbles: { age: 1, active: true }  },  o => o['active']); // 'barney'\n")])])]),t("h1",{attrs:{id:"_38、findlast"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_38、findlast"}},[a._v("#")]),a._v(" "),t("strong",[a._v("38、findLast")])]),a._v(" "),t("p",[a._v("此代码段返回给定函数返回真值的最后一个元素。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const findLast = (arr, fn) => arr.filter(fn).pop();\nfindLast([1, 2, 3, 4], n => n % 2 === 1); // 3\n")])])]),t("h1",{attrs:{id:"_39、flatten"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_39、flatten"}},[a._v("#")]),a._v(" "),t("strong",[a._v("39、flatten")])]),a._v(" "),t("p",[a._v("此代码段使用递归将数组展平到指定的深度。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const flatten = (arr, depth = 1) =>  arr.reduce((a, v) => a.concat(depth > 1 && Array.isArray(v) ? flatten(v, depth  1) : v), []);\nflatten([1, [2], 3, 4]); // [1, 2, 3, 4]flatten([1, [2, [3, [4, 5], 6], 7], 8], 2); // [1, 2, 3, [4, 5], 6, 7, 8]\n")])])]),t("h1",{attrs:{id:"_40、foreachright"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_40、foreachright"}},[a._v("#")]),a._v(" "),t("strong",[a._v("40、forEachRight")])]),a._v(" "),t("p",[a._v("此代码段从数组的最后一个元素开始，为数组的每个元素执行一个函数。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const forEachRight = (arr, callback) =>  arr    .slice(0)    .reverse()    .forEach(callback);\nforEachRight([1, 2, 3, 4], val => console.log(val)); // '4', '3', '2', '1'\n")])])]),t("h1",{attrs:{id:"_41、forown"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_41、forown"}},[a._v("#")]),a._v(" "),t("strong",[a._v("41、forOwn")])]),a._v(" "),t("p",[a._v("此代码段迭代对象的每个属性，并分别为每个属性迭代一个回调。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const forOwn = (obj, fn) => Object.keys(obj).forEach(key => fn(obj[key], key, obj));forOwn({ foo: 'bar', a: 1 }, v => console.log(v)); // 'bar', 1\n")])])]),t("h1",{attrs:{id:"_42、functionname"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_42、functionname"}},[a._v("#")]),a._v(" "),t("strong",[a._v("42、functionName")])]),a._v(" "),t("p",[a._v("此代码段将函数的名称打印到控制台中。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const functionName = fn => (console.debug(fn.name), fn);functionName(Math.max); // max (logged in debug channel of console)\n")])])]),t("h1",{attrs:{id:"_43、从日期获取时间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_43、从日期获取时间"}},[a._v("#")]),a._v(" "),t("strong",[a._v("43、从日期获取时间")])]),a._v(" "),t("p",[a._v("此代码段可用于以Date 字符串形式从对象中获取时间。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('const getColonTimeFromDate = date => date.toTimeString().slice(0, 8);\ngetColonTimeFromDate(new Date()); // "08:38:00"\n')])])]),t("h1",{attrs:{id:"_44、获取日期之间的天数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_44、获取日期之间的天数"}},[a._v("#")]),a._v(" "),t("strong",[a._v("44、获取日期之间的天数")])]),a._v(" "),t("p",[a._v("此代码段可用于查找两个日期之间的天数差异。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const getDaysDiffBetweenDates = (dateInitial, dateFinal) =>  (dateFinal  dateInitial) / (1000 * 3600 * 24);\ngetDaysDiffBetweenDates(new Date('20190113'), new Date('20190115')); // 2\n")])])]),t("h1",{attrs:{id:"_45、getstyle"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_45、getstyle"}},[a._v("#")]),a._v(" "),t("strong",[a._v("45、getStyle")])]),a._v(" "),t("p",[a._v("此代码段可用于获取特定元素的 CSS 规则值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const getStyle = (el, ruleName) => getComputedStyle(el)[ruleName];\ngetStyle(document.querySelector('p'), 'fontsize'); // '16px'\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);